<?xml version="1.0"?>
<doc>
    <assembly>
        <name>0Mistaken.API</name>
    </assembly>
    <members>
        <member name="T:Mistaken.API.AnnonymousEvents">
            <summary>
            Announymous Events.
            </summary>
        </member>
        <member name="M:Mistaken.API.AnnonymousEvents.Call(System.String,System.Object)">
            <summary>
            Calls Event.
            </summary>
            <param name="name">Event Name.</param>
            <param name="arg">Event args.</param>
        </member>
        <member name="M:Mistaken.API.AnnonymousEvents.Subscribe(System.String,System.Action{System.Object})">
            <summary>
            Subscribes to event.
            </summary>
            <param name="name">Event name.</param>
            <param name="handler">Event handler.</param>
        </member>
        <member name="M:Mistaken.API.AnnonymousEvents.UnSubscribe(System.String,System.Action{System.Object})">
            <summary>
            UnSubscribes to event.
            </summary>
            <param name="name">Event name.</param>
            <param name="handler">Event handler.</param>
        </member>
        <member name="T:Mistaken.API.Config">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.Config.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.Config.VerbouseOutput">
            <summary>
            Gets or sets a value indicating whether debug should be displayed.
            </summary>
        </member>
        <member name="P:Mistaken.API.Config.AutoUpdateConfig">
            <inheritdoc/>
        </member>
        <member name="T:Mistaken.API.GUI.PseudoGUIHandler">
            <summary>
            PseudGUIHandler component.
            </summary>
        </member>
        <member name="P:Mistaken.API.GUI.PseudoGUIHandler.Instance">
            <summary>
            Gets instance of <see cref="T:Mistaken.API.GUI.PseudoGUIHandler"/>.
            </summary>
        </member>
        <member name="M:Mistaken.API.GUI.PseudoGUIHandler.Ini">
            <summary>
            Adds <see cref="T:Mistaken.API.GUI.PseudoGUIHandler"/> to <see cref="P:Exiled.API.Features.Server.Host"/>'s gameObject.
            </summary>
        </member>
        <member name="M:Mistaken.API.GUI.PseudoGUIHandler.Ignore(Exiled.API.Features.Player)">
            <summary>
            Stops updating GUI.
            </summary>
            <param name="p">player to ignore.</param>
        </member>
        <member name="M:Mistaken.API.GUI.PseudoGUIHandler.StopIgnore(Exiled.API.Features.Player)">
            <summary>
            Starts updating GUI.
            </summary>
            <param name="p">player to stop ignoring.</param>
        </member>
        <member name="T:Mistaken.API.GUI.PseudoGUIPosition">
            <summary>
            Content position.
            </summary>
        </member>
        <member name="T:Mistaken.API.Extensions.PseudoGUIExtensions">
            <summary>
            Extensions.
            </summary>
        </member>
        <member name="M:Mistaken.API.Extensions.PseudoGUIExtensions.SetGUI(Exiled.API.Features.Player,System.String,Mistaken.API.GUI.PseudoGUIPosition,System.String,System.Single)">
            <summary>
            Sets GUI Element.
            </summary>
            <param name="player">target.</param>
            <param name="key">key.</param>
            <param name="type">position.</param>
            <param name="content">content.</param>
            <param name="duration">duration.</param>
        </member>
        <member name="M:Mistaken.API.Extensions.PseudoGUIExtensions.SetGUI(Exiled.API.Features.Player,System.String,Mistaken.API.GUI.PseudoGUIPosition,System.String)">
            <summary>
            Sets GUI Element.
            </summary>
            <param name="player">target.</param>
            <param name="key">key.</param>
            <param name="type">position.</param>
            <param name="content">content.</param>
        </member>
        <member name="T:Mistaken.API.Extensions.Extensions">
            <summary>
            Main Utils.
            </summary>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>
            Randomizes supplied list.
            </summary>
            <typeparam name="T">List Type.</typeparam>
            <param name="list">List to randomize.</param>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Randomizes supplied list with seed.
            </summary>
            <typeparam name="T">List Type.</typeparam>
            <param name="list">List to randomize.</param>
            <param name="seed">Seed used to randomize.</param>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.Shuffle``1(``0[])">
            <summary>
            Randomizes supplied array.
            </summary>
            <typeparam name="T">Array Type.</typeparam>
            <param name="list">Array to randomize.</param>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.Shuffle``1(``0[],System.Int32)">
            <summary>
            Randomizes supplied array with seed.
            </summary>
            <typeparam name="T">Array Type.</typeparam>
            <param name="list">Array to randomize.</param>
            <param name="seed">Seed used to randomize.</param>
        </member>
        <member name="P:Mistaken.API.Extensions.Extensions.IgnoredUIDs">
            <summary>
            Gets or sets list of staff that allowed to ignore DNT.
            </summary>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.GetByRoomOffset(Exiled.API.Features.Room,UnityEngine.Vector3)">
            <summary>
            Returns room offseted position.
            </summary>
            <param name="me">Room.</param>
            <param name="offset">Offset.</param>
            <returns>Position.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.Broadcast(Exiled.API.Features.Player,System.String,System.UInt16,System.String,Broadcast.BroadcastFlags)">
            <inheritdoc cref="M:Mistaken.API.MapPlus.Broadcast(System.String,System.UInt16,System.String,Broadcast.BroadcastFlags)"/>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.CheckPermissions(Exiled.API.Features.Player,PlayerPermissions)">
            <summary>
            Checks if player has base game permission.
            </summary>
            <param name="me">Player.</param>
            <param name="perms">Permission.</param>
            <returns>If has permission.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.IsDev(Exiled.API.Features.Player)">
            <summary>
            If player is Dev.
            </summary>
            <param name="me">Player.</param>
            <returns>Is Dev.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.IsDevUserId(System.String)">
            <summary>
            Returns if UserId is Dev's userId.
            </summary>
            <param name="me">UserId.</param>
            <returns>If belongs to dev.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.GetPlayer(CommandSender)">
            <summary>
            Returns player.
            </summary>
            <param name="me">Potentialy player.</param>
            <returns>Player.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.GetPlayer(CommandSystem.ICommandSender)">
            <summary>
            Returns player.
            </summary>
            <param name="me">Potentialy player.</param>
            <returns>Player.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.IsPlayer(CommandSender)">
            <summary>
            Returns if <paramref name="me"/> is Player or Server.
            </summary>
            <param name="me">To Check.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.IsPlayer(CommandSystem.ICommandSender)">
            <summary>
            Returns if <paramref name="me"/> is Player or Server.
            </summary>
            <param name="me">To Check.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.IsDNT(Exiled.API.Features.Player)">
            <summary>
            If player has DNT and if it should be effective.
            </summary>
            <param name="me">Player.</param>
            <returns>if has DNT.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.GetSessionVar``1(Exiled.API.Features.Player,Mistaken.API.SessionVarType,``0)">
            <summary>
            Returns SessionVarValue or <paramref name="defaultValue"/> if was not found.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="me">Player.</param>
            <param name="type">Session Var.</param>
            <param name="defaultValue">Default Value.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.GetSessionVar``1(Exiled.API.Features.Player,System.String,``0)">
            <summary>
            Returns SessionVarValue or <paramref name="defaultValue"/> if was not found.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="me">Player.</param>
            <param name="name">Session Var.</param>
            <param name="defaultValue">Default Value.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.SetSessionVar(Exiled.API.Features.Player,Mistaken.API.SessionVarType,System.Object)">
            <summary>
            Sets SessionVarValue.
            </summary>
            <param name="me">Player.</param>
            <param name="type">Session Var.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.SetSessionVar(Exiled.API.Features.Player,System.String,System.Object)">
            <summary>
            Sets SessionVarValue.
            </summary>
            <param name="me">Player.</param>
            <param name="name">Session Var.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.CheckPermission(CommandSender,System.String)">
            <summary>
            Returns if player has permission.
            </summary>
            <param name="cs">Player.</param>
            <param name="permission">Permission.</param>
            <returns>If has permisison.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.CheckPermission(Exiled.API.Features.Player,System.String)">
            <summary>
            Returns if player has permission.
            </summary>
            <param name="player">Player.</param>
            <param name="permission">Permission.</param>
            <returns>If has permisison.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.GetDisplayName(Exiled.API.Features.Player)">
            <summary>
            Returns <see cref="P:Exiled.API.Features.Player.DisplayNickname"/> or <see cref="P:Exiled.API.Features.Player.Nickname"/> if first is null or "NULL" if player is null.
            </summary>
            <param name="player">Player.</param>
            <returns>Name.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.Kill(Exiled.API.Features.Player,System.String)">
            <summary>
            Kills player with message.
            </summary>
            <param name="me">Player.</param>
            <param name="reason">Kill reason.</param>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.ToString(Exiled.API.Features.Player,System.Boolean)">
            <summary>
            Converts player to string.
            </summary>
            <param name="me">Player.</param>
            <param name="userId">If userId should be shown.</param>
            <returns>String version of player.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.IsReadyPlayer(Exiled.API.Features.Player)">
            <summary>
            Returns if player is real, ready player.
            </summary>
            <param name="me">Playet to check.</param>
            <returns>If player is ready, real player.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.IsPressingShift(Exiled.API.Features.Player)">
            <summary>
            If player is sprinting.
            </summary>
            <param name="player">Player to check.</param>
            <returns><see langword="true"/> if player is sprinting else <see langword="false"/>.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.Extensions.SpawnBoxCollider(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Spawns BoxCollider.
            </summary>
            <param name="pos">Position.</param>
            <param name="scale">Scale.</param>
            <returns>GameObject with BoxCollider.</returns>
        </member>
        <member name="T:Mistaken.API.Extensions.DoorUtils">
            <summary>
            Door Utils.
            </summary>
        </member>
        <member name="M:Mistaken.API.Extensions.DoorUtils.Ini">
            <summary>
            Initiates <see cref="T:Mistaken.API.Extensions.DoorUtils"/>.
            </summary>
        </member>
        <member name="M:Mistaken.API.Extensions.DoorUtils.DeIni">
            <summary>
            Deinitiates <see cref="T:Mistaken.API.Extensions.DoorUtils"/>.
            </summary>
        </member>
        <member name="M:Mistaken.API.Extensions.DoorUtils.GetPrefab(Mistaken.API.Extensions.DoorUtils.DoorType)">
            <summary>
            Returns door prefab.
            </summary>
            <param name="type">Door Type.</param>
            <returns>Prefab.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.DoorUtils.SpawnDoor(Mistaken.API.Extensions.DoorUtils.DoorType,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,System.String)">
            <summary>
            Spawns Door.
            </summary>
            <param name="type">Door Type.</param>
            <param name="position">Door Position, if <see cref="F:UnityEngine.Vector3.y"/> is smaller than 900 then door are automaticly locked to prevent crash.</param>
            <param name="rotation">Door Rotation.</param>
            <param name="size">Door Size.</param>
            <param name="shouldSpawn">Should door be spawned on clients.</param>
            <param name="name">Door name or <see langword="null"/> if there should be no name.</param>
            <returns>Rerurns spawned <see cref="T:Interactables.Interobjects.DoorUtils.DoorVariant"/>.</returns>
        </member>
        <member name="M:Mistaken.API.Extensions.DoorUtils.SpawnDoor(Mistaken.API.Extensions.DoorUtils.DoorType,Exiled.API.Features.Room,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,System.String)">
            <inheritdoc cref="M:Mistaken.API.Extensions.DoorUtils.SpawnDoor(Mistaken.API.Extensions.DoorUtils.DoorType,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean,System.String)"/>
        </member>
        <member name="M:Mistaken.API.Extensions.DoorUtils.ServerChangeLock(Interactables.Interobjects.DoorUtils.DoorVariant,Mistaken.API.Extensions.DoorUtils.PluginDoorLockReason,System.Boolean)">
            <summary>
            Changes lock setting for plugin door lock.
            </summary>
            <param name="door">Door to update.</param>
            <param name="type">Lock.</param>
            <param name="active">Should lock be enabled or disabled.</param>
        </member>
        <member name="T:Mistaken.API.Extensions.DoorUtils.DoorType">
            <summary>
            Door Type.
            </summary>
        </member>
        <member name="T:Mistaken.API.Extensions.DoorUtils.PluginDoorLockReason">
            <summary>
            Door lock reason.
            </summary>
        </member>
        <member name="T:Mistaken.API.Extensions.SyncVar">
            <summary>
            SyncVar Extensions.
            </summary>
        </member>
        <member name="M:Mistaken.API.Extensions.SyncVar.TargetSetBadge(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String,System.String)">
            <summary>
            Zmienia rangę <paramref name="player"/> dla <paramref name="target"/>.
            </summary>
            <param name="player">Osob.</param>
            <param name="target">Osoba która ma widzieć inną rangę.</param>
            <param name="name">Nazwa.</param>
            <param name="color">Kolor.</param>
        </member>
        <member name="M:Mistaken.API.Extensions.SyncVar.TargetSetNickname(Exiled.API.Features.Player,Exiled.API.Features.Player,System.String)">
            <summary>
            Changes Nickname.
            </summary>
            <param name="player">Player to change nickname for.</param>
            <param name="target">Player that will see change.</param>
            <param name="nickname">Nickname.</param>
        </member>
        <member name="M:Mistaken.API.Extensions.SyncVar.ChangeAppearance(Exiled.API.Features.Player,Exiled.API.Features.Player,RoleType)">
            <summary>
            Changes Appeareance.
            </summary>
            <param name="player">Player to change role for.</param>
            <param name="target">Player that will see change.</param>
            <param name="type">Role.</param>
        </member>
        <member name="T:Mistaken.API.PlayerPreferences">
            <summary>
            Player preferences enum.
            </summary>
        </member>
        <member name="T:Mistaken.API.PluginHandler">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.PluginHandler.Author">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.PluginHandler.Name">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.PluginHandler.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.PluginHandler.Priority">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.PluginHandler.RequiredExiledVersion">
            <inheritdoc/>
        </member>
        <member name="M:Mistaken.API.PluginHandler.OnEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Mistaken.API.PluginHandler.OnDisabled">
            <inheritdoc/>
        </member>
        <member name="T:Mistaken.API.BetterWarheadHandler">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.Warhead">
            <summary>
            Gets <see cref="T:Mistaken.API.BetterWarheadHandler.WarheadStatus"/> instance.
            </summary>
        </member>
        <member name="M:Mistaken.API.BetterWarheadHandler.#ctor(Mistaken.API.PluginHandler)">
            <inheritdoc cref="M:Mistaken.API.Diagnostics.Module.#ctor(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})"/>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.Name">
            <inheritdoc/>
        </member>
        <member name="M:Mistaken.API.BetterWarheadHandler.OnEnable">
            <inheritdoc/>
        </member>
        <member name="M:Mistaken.API.BetterWarheadHandler.OnDisable">
            <inheritdoc/>
        </member>
        <member name="T:Mistaken.API.BetterWarheadHandler.WarheadStatus">
            <summary>
            Warhead status.
            </summary>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.CountingDown">
            <inheritdoc cref="P:Exiled.API.Features.Warhead.IsInProgress"/>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.TimeLeft">
            <inheritdoc cref="P:Exiled.API.Features.Warhead.DetonationTimer"/>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.LeverLock">
            <summary>
            Gets or sets a value indicating whether lever should be locked or not.
            </summary>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.StopLock">
            <summary>
            Gets or sets a value indicating whether warhead can be stopped using button or not.
            </summary>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.StartLock">
            <summary>
            Gets or sets a value indicating whether warhead can be started using button or not.
            </summary>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.ButtonLock">
            <summary>
            Gets or sets a value indicating whether surface button can be unlocked or not.
            </summary>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.ButtonOpen">
            <inheritdoc cref="P:Exiled.API.Features.Warhead.IsKeycardActivated"/>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.Detonated">
            <inheritdoc cref="P:Exiled.API.Features.Warhead.IsDetonated"/>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.Enabled">
            <inheritdoc cref="P:Exiled.API.Features.Warhead.LeverStatus"/>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.LastStartUser">
            <summary>
            Gets last user that used started warhead.
            </summary>
        </member>
        <member name="P:Mistaken.API.BetterWarheadHandler.WarheadStatus.LastStopUser">
            <summary>
            Gets last user that used stoped warhead.
            </summary>
        </member>
        <member name="T:Mistaken.API.CustomInfoHandler">
            <inheritdoc/>
        </member>
        <member name="M:Mistaken.API.CustomInfoHandler.Set(Exiled.API.Features.Player,System.String,System.String)">
            <summary>
            Sets CustomInfo.
            </summary>
            <param name="player">Player.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Mistaken.API.CustomInfoHandler.SetTargets(Exiled.API.Features.Player,System.String,System.String,System.Func{Exiled.API.Features.Player,System.Boolean})">
            <summary>
            Sets CustomInfo for players maching criteria.
            </summary>
            <param name="player">Player.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <param name="selector">Func which selects players maching criteria.</param>
        </member>
        <member name="M:Mistaken.API.CustomInfoHandler.SetTarget(Exiled.API.Features.Player,System.String,System.String,Exiled.API.Features.Player)">
            <summary>
            Sets CustomInfo for specific player.
            </summary>
            <param name="player">Player.</param>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <param name="target">Target.</param>
        </member>
        <member name="M:Mistaken.API.CustomInfoHandler.#ctor(Mistaken.API.PluginHandler)">
            <inheritdoc cref="M:Mistaken.API.Diagnostics.Module.#ctor(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})"/>
        </member>
        <member name="P:Mistaken.API.CustomInfoHandler.IsBasic">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.CustomInfoHandler.Name">
            <inheritdoc/>
        </member>
        <member name="M:Mistaken.API.CustomInfoHandler.OnDisable">
            <inheritdoc/>
        </member>
        <member name="M:Mistaken.API.CustomInfoHandler.OnEnable">
            <inheritdoc/>
        </member>
        <member name="T:Mistaken.API.Diagnostics.MasterHandler">
            <summary>
            Master module handler.
            </summary>
        </member>
        <member name="T:Mistaken.API.Diagnostics.MasterHandler.Exception">
            <summary>
            Exception Info.
            </summary>
        </member>
        <member name="F:Mistaken.API.Diagnostics.MasterHandler.Exception.Ex">
            <summary>
            Thrown Exception.
            </summary>
        </member>
        <member name="F:Mistaken.API.Diagnostics.MasterHandler.Exception.Module">
            <summary>
            Module throwing exception.
            </summary>
        </member>
        <member name="F:Mistaken.API.Diagnostics.MasterHandler.Exception.Name">
            <summary>
            Handler Name.
            </summary>
        </member>
        <member name="F:Mistaken.API.Diagnostics.MasterHandler.Handlers">
            <summary>
            Handlers bound to Module.
            </summary>
        </member>
        <member name="E:Mistaken.API.Diagnostics.MasterHandler.OnError">
            <summary>
            Called when module throws error when handling event.
            </summary>
        </member>
        <member name="M:Mistaken.API.Diagnostics.MasterHandler.LogError(System.Exception,Mistaken.API.Diagnostics.Module,System.String)">
            <summary>
            Logs Error.
            </summary>
            <param name="ex">Catched exception.</param>
            <param name="module">Catching module.</param>
            <param name="name">Catching function name.</param>
        </member>
        <member name="M:Mistaken.API.Diagnostics.MasterHandler.Handle(Mistaken.API.Diagnostics.Module,System.Action,System.String)">
            <summary>
            Handles event and mesures time that took to handle.
            </summary>
            <param name="module">Modue.</param>
            <param name="action">Handler.</param>
            <param name="name">Handler Name.</param>
            <returns>Event Handler.</returns>
        </member>
        <member name="M:Mistaken.API.Diagnostics.MasterHandler.Handle``1(Mistaken.API.Diagnostics.Module,System.Action{``0})">
            <summary>
            Handles event and mesures time that took to handle.
            </summary>
            <typeparam name="T">Event Args Type.</typeparam>
            <param name="module">Modue.</param>
            <param name="action">Handler.</param>
            <returns>Event Handler.</returns>
        </member>
        <member name="M:Mistaken.API.Diagnostics.MasterHandler.LogTime(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Logs Time.
            </summary>
            <param name="moduleName">Module Name.</param>
            <param name="name">Handler Name.</param>
            <param name="start">Handling start time.</param>
            <param name="end">Handling end time.</param>
        </member>
        <member name="T:Mistaken.API.Diagnostics.MasterHandler.Status">
            <summary>
            Run Status.
            </summary>
        </member>
        <member name="P:Mistaken.API.Diagnostics.MasterHandler.Status.StatusCode">
            <summary>
            Gets or sets run Status Code.
            </summary>
        </member>
        <member name="P:Mistaken.API.Diagnostics.MasterHandler.Status.Exceptions">
            <summary>
            Gets or sets run Exceptions.
            </summary>
        </member>
        <member name="P:Mistaken.API.Diagnostics.MasterHandler.Status.LoadedModules">
            <summary>
            Gets or sets loaded Modules.
            </summary>
        </member>
        <member name="P:Mistaken.API.Diagnostics.MasterHandler.Status.LoadedPlugins">
            <summary>
            Gets or sets loaded Plugins.
            </summary>
        </member>
        <member name="T:Mistaken.API.Diagnostics.ModuleLogger">
            <summary>
            Used to Log with prefix.
            </summary>
        </member>
        <member name="M:Mistaken.API.Diagnostics.ModuleLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Mistaken.API.Diagnostics.ModuleLogger"/> class.
            Constructor.
            </summary>
        </member>
        <member name="M:Mistaken.API.Diagnostics.ModuleLogger.Debug(System.Object,System.Boolean)">
            <inheritdoc cref="M:Exiled.API.Features.Log.Debug(System.Object,System.Boolean)"/>
        </member>
        <member name="M:Mistaken.API.Diagnostics.ModuleLogger.Info(System.Object)">
            <inheritdoc cref="M:Exiled.API.Features.Log.Info(System.Object)"/>
        </member>
        <member name="M:Mistaken.API.Diagnostics.ModuleLogger.Warn(System.Object)">
            <inheritdoc cref="M:Exiled.API.Features.Log.Warn(System.Object)"/>
        </member>
        <member name="M:Mistaken.API.Diagnostics.ModuleLogger.Error(System.Object)">
            <inheritdoc cref="M:Exiled.API.Features.Log.Error(System.Object)"/>
        </member>
        <member name="T:Mistaken.API.Diagnostics.Module">
            <summary>
            Diagnostics module.
            </summary>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.CallSafeDelayed(System.Single,System.Action,System.String)">
            <summary>
            Calls <see cref="M:MEC.Timing.CallDelayed(System.Single,System.Action)"/> and adds try catch to action.
            </summary>
            <param name="delay">Delay passed to called function.</param>
            <param name="action">Action passed to called function.</param>
            <param name="name">Function name.</param>
            <returns>Courotine handle returned by called function.</returns>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.RunSafeCoroutine(System.Collections.Generic.IEnumerator{System.Single},System.String)">
            <summary>
            Calls <see cref="M:MEC.Timing.RunCoroutine(System.Collections.Generic.IEnumerator{System.Single})"/> and reroutes exceptions.
            </summary>
            <param name="courotine">Delay passed to called function.</param>
            <param name="name">Courotine name.</param>
            <returns>Courotine handle returned by called function.</returns>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.OnEnable(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})">
            <summary>
            Enables all modules that has <see cref="P:Mistaken.API.Diagnostics.Module.Enabled"/> set to <see langword="true"/> from specific plugin.
            </summary>
            <param name="plugin">Plugin.</param>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.OnDisable(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})">
            <summary>
            Disables all modules that has <see cref="P:Mistaken.API.Diagnostics.Module.Enabled"/> set to <see langword="true"/> from specific plugin.
            </summary>
            <param name="plugin">Plugin.</param>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.EnableAllExcept(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})">
            <summary>
            Enables all modules that has <see cref="P:Mistaken.API.Diagnostics.Module.Enabled"/> set to <see langword="true"/> and <see cref="P:Mistaken.API.Diagnostics.Module.IsBasic"/> set to <see langword="false"/> except from <paramref name="plugin"/>.
            </summary>
            <param name="plugin">Plugin.</param>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.DisableAllExcept(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})">
            <summary>
            Disables all modules that has <see cref="P:Mistaken.API.Diagnostics.Module.Enabled"/> set to <see langword="true"/> and <see cref="P:Mistaken.API.Diagnostics.Module.IsBasic"/> set to <see langword="false"/> except from <paramref name="plugin"/>.
            </summary>
            <param name="plugin">Plugin.</param>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.#ctor(Exiled.API.Interfaces.IPlugin{Exiled.API.Interfaces.IConfig})">
            <summary>
            Initializes a new instance of the <see cref="T:Mistaken.API.Diagnostics.Module"/> class.
            Default Constructor.
            </summary>
            <param name="plugin">Plugin creating module.</param>
        </member>
        <member name="P:Mistaken.API.Diagnostics.Module.Name">
            <summary>
            Gets module Name.
            </summary>
        </member>
        <member name="P:Mistaken.API.Diagnostics.Module.Enabled">
            <summary>
            Gets or sets a value indicating whether if module should be enabled.
            </summary>
        </member>
        <member name="P:Mistaken.API.Diagnostics.Module.IsBasic">
            <summary>
            Gets a value indicating whether if is requied for basic functions.
            </summary>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.OnEnable">
            <summary>
            Called when enabling.
            </summary>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.OnDisable">
            <summary>
            Called when disabling.
            </summary>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.CallDelayed(System.Single,System.Action,System.String)">
            <summary>
            Calls <see cref="M:MEC.Timing.CallDelayed(System.Single,System.Action)"/> and adds try catch to action.
            </summary>
            <param name="delay">Delay passed to called function.</param>
            <param name="action">Action passed to called function.</param>
            <param name="name">Function name.</param>
            <returns>Courotine handle returned by called function.</returns>
        </member>
        <member name="M:Mistaken.API.Diagnostics.Module.RunCoroutine(System.Collections.Generic.IEnumerator{System.Single},System.String)">
            <summary>
            Calls <see cref="M:MEC.Timing.RunCoroutine(System.Collections.Generic.IEnumerator{System.Single})"/> and reroutes exceptions.
            </summary>
            <param name="courotine">Delay passed to called function.</param>
            <param name="name">Courotine name.</param>
            <returns>Courotine handle returned by called function.</returns>
        </member>
        <member name="P:Mistaken.API.Diagnostics.Module.Plugin">
            <summary>
            Gets plugin that this module belong to.
            </summary>
        </member>
        <member name="P:Mistaken.API.Diagnostics.Module.Log">
            <summary>
            Gets used to use special logging method.
            </summary>
        </member>
        <member name="T:Mistaken.API.Commands.IBetterCommand">
            <summary>
            Command Handler.
            </summary>
        </member>
        <member name="P:Mistaken.API.Commands.IBetterCommand.Command">
            <inheritdoc cref="P:CommandSystem.ICommand.Command"/>
        </member>
        <member name="P:Mistaken.API.Commands.IBetterCommand.Aliases">
            <inheritdoc cref="P:CommandSystem.ICommand.Aliases"/>
        </member>
        <member name="P:Mistaken.API.Commands.IBetterCommand.Description">
            <inheritdoc cref="P:CommandSystem.ICommand.Description"/>
        </member>
        <member name="P:Mistaken.API.Commands.IBetterCommand.FullPermission">
            <summary>
            Gets full permission name.
            </summary>
        </member>
        <member name="M:Mistaken.API.Commands.IBetterCommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)">
            <inheritdoc cref="M:CommandSystem.ICommand.Execute(System.ArraySegment{System.String},CommandSystem.ICommandSender,System.String@)"/>
        </member>
        <member name="M:Mistaken.API.Commands.IBetterCommand.Execute(CommandSystem.ICommandSender,System.String[],System.Boolean@)">
            <summary>
            Executes command.
            </summary>
            <param name="sender">Command sender.</param>
            <param name="args">Arguments.</param>
            <param name="success">If command was successful.</param>
            <returns>Command response.</returns>
        </member>
        <member name="M:Mistaken.API.Commands.IBetterCommand.GetPlayers(System.String,System.Boolean)">
            <summary>
            Returns player list with ids.
            </summary>
            <param name="arg">Ids.</param>
            <param name="allowPets">If pets can be included.</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Exiled.API.Features.Player"/>s.</returns>
        </member>
        <member name="M:Mistaken.API.Commands.IBetterCommand.ForeachPlayer(System.String,System.Action{Exiled.API.Features.Player},System.Boolean)">
            <summary>
            Runs <paramref name="toExecute"/> on every matching player.
            </summary>
            <param name="arg">Ids.</param>
            <param name="toExecute">Action.</param>
            <param name="allowPets">If pets can be included.</param>
            <returns>If found any player.</returns>
        </member>
        <member name="M:Mistaken.API.Commands.IBetterCommand.ForeachPlayer(System.String,System.Boolean@,System.Func{Exiled.API.Features.Player,System.String[]},System.Boolean)">
            <summary>
            Runs <paramref name="toExecute"/> on every matching player.
            </summary>
            <param name="arg">Ids.</param>
            <param name="success">If found any player.</param>
            <param name="toExecute">Func.</param>
            <param name="allowPets">If pets can be included.</param>
            <returns>Joined results of all <paramref name="toExecute"/>.</returns>
        </member>
        <member name="T:Mistaken.API.Commands.IPermissionLocked">
            <summary>
            Interface used to mark that command requires permissions.
            </summary>
        </member>
        <member name="P:Mistaken.API.Commands.IPermissionLocked.Permission">
            <summary>
            Gets permission.
            </summary>
        </member>
        <member name="P:Mistaken.API.Commands.IPermissionLocked.PluginName">
            <summary>
            Gets plugin name, used as prefix.
            </summary>
        </member>
        <member name="T:Mistaken.API.Components.InRange">
            <summary>
            Component used to detect players.
            </summary>
        </member>
        <member name="M:Mistaken.API.Components.InRange.Spawn(UnityEngine.Vector3,UnityEngine.Vector3,System.Action{Exiled.API.Features.Player},System.Action{Exiled.API.Features.Player})">
            <summary>
            Spawnes <see cref="T:Mistaken.API.Components.InRange"/>.
            </summary>
            <param name="pos">Position of trigger.</param>
            <param name="size">Size of trigger.</param>
            <param name="onEnter">Action called when someone enteres trigger.</param>
            <param name="onExit">Action called when someone exits trigger.</param>
            <returns>Spawned <see cref="T:Mistaken.API.Components.InRange"/>.</returns>
        </member>
        <member name="M:Mistaken.API.Components.InRange.Spawn(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Vector3,System.Action{Exiled.API.Features.Player},System.Action{Exiled.API.Features.Player})">
            <summary>
            Spawnes <see cref="T:Mistaken.API.Components.InRange"/>.
            </summary>
            <param name="parrent">Parrent transform.</param>
            <param name="offset">Offset from parrent.</param>
            <param name="size">Size of trigger.</param>
            <param name="onEnter">Action called when someone enteres trigger.</param>
            <param name="onExit">Action called when someone exits trigger.</param>
            <returns>Spawned <see cref="T:Mistaken.API.Components.InRange"/>.</returns>
        </member>
        <member name="P:Mistaken.API.Components.InRange.ColliderInArea">
            <summary>
            Gets hashSet of gameObjects inside trigger.
            </summary>
        </member>
        <member name="P:Mistaken.API.Components.InRange.AllowNPCs">
            <summary>
            Gets or sets a value indicating whether trigger should detect NPCs.
            </summary>
        </member>
        <member name="T:Mistaken.API.Components.InRangeBall">
            <summary>
            Component used to detect players.
            </summary>
        </member>
        <member name="M:Mistaken.API.Components.InRangeBall.Spawn(UnityEngine.Vector3,System.Single,System.Single,System.Action{Exiled.API.Features.Player},System.Action{Exiled.API.Features.Player})">
            <summary>
            Spawnes <see cref="T:Mistaken.API.Components.InRangeBall"/>.
            </summary>
            <param name="pos">Position of trigger.</param>
            <param name="radius">Radious of trigger.</param>
            <param name="height">Height of trigger.</param>
            <param name="onEnter">Action called when someone enteres trigger.</param>
            <param name="onExit">Action called when someone exits trigger.</param>
            <returns>Spawned <see cref="T:Mistaken.API.Components.InRangeBall"/>.</returns>
        </member>
        <member name="M:Mistaken.API.Components.InRangeBall.Spawn(UnityEngine.Transform,UnityEngine.Vector3,System.Single,System.Single,System.Action{Exiled.API.Features.Player},System.Action{Exiled.API.Features.Player})">
            <summary>
            Spawnes <see cref="T:Mistaken.API.Components.InRangeBall"/>.
            </summary>
            <param name="parrent">Parrent transform.</param>
            <param name="offset">Offset from parrent.</param>
            <param name="radius">Radious of trigger.</param>
            <param name="height">Height of trigger.</param>
            <param name="onEnter">Action called when someone enteres trigger.</param>
            <param name="onExit">Action called when someone exits trigger.</param>
            <returns>Spawned <see cref="T:Mistaken.API.Components.InRangeBall"/>.</returns>
        </member>
        <member name="P:Mistaken.API.Components.InRangeBall.ColliderInArea">
            <summary>
            Gets hashSet of gameObjects inside trigger.
            </summary>
        </member>
        <member name="P:Mistaken.API.Components.InRangeBall.AllowNPCs">
            <summary>
            Gets or sets a value indicating whether trigger should detect NPCs.
            </summary>
        </member>
        <member name="T:Mistaken.API.MapPlus">
            <summary>
            Map Extensions but not as extensionb because <see cref="T:Exiled.API.Features.Map"/> is static.
            </summary>
        </member>
        <member name="P:Mistaken.API.MapPlus.Lured">
            <summary>
            Gets or sets a value indicating whether if SCP 106 someone lured.
            </summary>
        </member>
        <member name="P:Mistaken.API.MapPlus.FemurBreaked">
            <summary>
            Gets or sets a value indicating whether if SCP 106 Containment was used.
            </summary>
        </member>
        <member name="P:Mistaken.API.MapPlus.DecontaminationEndTime">
            <summary>
            Gets time to decontamination end.
            </summary>
        </member>
        <member name="M:Mistaken.API.MapPlus.Broadcast(System.String,System.UInt16,System.String,Broadcast.BroadcastFlags)">
            <summary>
            Send Broadcast.
            </summary>
            <param name="tag">Tag.</param>
            <param name="duration">Duration.</param>
            <param name="message">Message.</param>
            <param name="flags">Flags.</param>
        </member>
        <member name="M:Mistaken.API.MapPlus.Spawn(ItemType,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Spawns items with args.
            </summary>
            <param name="item">Item info.</param>
            <param name="position">Spawn position.</param>
            <param name="rotation">Spawn rotation.</param>
            <param name="size">Pickup size.</param>
            <returns>Spawned object.</returns>
        </member>
        <member name="M:Mistaken.API.MapPlus.SpawnDummy(RoleType,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,System.String)">
            <summary>
            Spawns dummy.
            </summary>
            <param name="role">Role.</param>
            <param name="position">Position.</param>
            <param name="rotation">Rotation.</param>
            <param name="size">Size.</param>
            <param name="name">Name.</param>
            <returns>Dummy.</returns>
        </member>
        <member name="M:Mistaken.API.MapPlus.IsLCZDecontaminated(System.Single)">
            <summary>
            Is LCZ Decontaminated.
            </summary>
            <param name="minTimeLeft">Offset.</param>
            <returns>If LCZ is Decontaminated.</returns>
        </member>
        <member name="M:Mistaken.API.MapPlus.IsLCZDecontaminated(System.Single@,System.Single)">
            <summary>
            If LCZ was decontaminated with out param.
            </summary>
            <param name="lczTime">Time to decontamination.</param>
            <param name="minTimeLeft">Offset.</param>
            <returns>If LCZ is decontaminated.</returns>
        </member>
        <member name="T:Mistaken.API.RealPlayers">
            <summary>
            RealPlayers.
            </summary>
        </member>
        <member name="P:Mistaken.API.RealPlayers.List">
            <summary>
            Gets list of players.
            </summary>
        </member>
        <member name="P:Mistaken.API.RealPlayers.RandomList">
            <summary>
            Gets random list of players.
            </summary>
        </member>
        <member name="M:Mistaken.API.RealPlayers.Get(Team)">
            <summary>
            Returns players that belong to specified team.
            </summary>
            <param name="value">Team.</param>
            <returns>Maching players.</returns>
        </member>
        <member name="M:Mistaken.API.RealPlayers.Get(RoleType)">
            <summary>
            Returns players that play as specified class.
            </summary>
            <param name="value">Role.</param>
            <returns>Matching players.</returns>
        </member>
        <member name="M:Mistaken.API.RealPlayers.Get(System.Int32)">
            <summary>
            Player with playerId.
            </summary>
            <param name="value">PlayerId.</param>
            <returns>Maching playerId.</returns>
        </member>
        <member name="M:Mistaken.API.RealPlayers.Get(System.String)">
            <summary>
            Player with uid/playerId/nickname.
            </summary>
            <param name="value">Arg.</param>
            <returns>Matching player.</returns>
        </member>
        <member name="M:Mistaken.API.RealPlayers.Any(Team)">
            <summary>
            Returns if there is maching player.
            </summary>
            <param name="value">Team.</param>
            <returns>If there is maching player.</returns>
        </member>
        <member name="M:Mistaken.API.RealPlayers.Any(RoleType)">
            <summary>
            Returns if there is maching player.
            </summary>
            <param name="value">Role.</param>
            <returns>If there is maching player.</returns>
        </member>
        <member name="T:Mistaken.API.RoundPlus">
            <summary>
            Used for RoundId.
            </summary>
        </member>
        <member name="P:Mistaken.API.RoundPlus.RoundId">
            <summary>
            Gets round Id.
            </summary>
        </member>
        <member name="M:Mistaken.API.RoundPlus.IncRoundId">
            <summary>
            Increments Round Id.
            </summary>
        </member>
        <member name="T:Mistaken.API.SessionVarType">
            <summary>
            Session Vars.
            </summary>
        </member>
        <member name="T:Mistaken.API.Utilities.Map">
            <summary>
            Map Utilities.
            </summary>
        </member>
        <member name="E:Mistaken.API.Utilities.Map.OnTeslaModeChange">
            <summary>
            Event called before tesla mode change.
            </summary>
        </member>
        <member name="P:Mistaken.API.Utilities.Map.RespawnLock">
            <summary>
            Gets or sets a value indicating whether respawns should be locked or not.
            </summary>
        </member>
        <member name="P:Mistaken.API.Utilities.Map.TeslaMode">
            <summary>
            Gets or sets tesla mode.
            </summary>
        </member>
        <member name="M:Mistaken.API.Utilities.Map.RestartTeslaGates(System.Boolean)">
            <summary>
            Fires all tesla gates 3 times.
            </summary>
            <param name="loud">If <see langword="true"/> CASSIE message will be played.</param>
        </member>
        <member name="M:Mistaken.API.Utilities.Map.OpenAllDoors">
            <summary>
            Opens all doors.
            </summary>
        </member>
        <member name="M:Mistaken.API.Utilities.Map.CloseAllDoors">
            <summary>
            Closes all doors.
            </summary>
        </member>
        <member name="M:Mistaken.API.Utilities.Map.RestartDoors">
            <summary>
            Closes all doors with CASSIE message.
            </summary>
        </member>
        <member name="T:Mistaken.API.Utilities.Map.Blackout">
            <summary>
            Blackout utilities.
            </summary>
        </member>
        <member name="P:Mistaken.API.Utilities.Map.Blackout.Enabled">
            <summary>
            Gets or sets a value indicating whether blackout is enabled or not.
            </summary>
        </member>
        <member name="P:Mistaken.API.Utilities.Map.Blackout.Length">
            <summary>
            Gets or sets how long is single blackout.
            </summary>
        </member>
        <member name="P:Mistaken.API.Utilities.Map.Blackout.Delay">
            <summary>
            Gets or sets a delay between blackouts.
            </summary>
        </member>
        <member name="P:Mistaken.API.Utilities.Map.Blackout.OnlyHCZ">
            <summary>
            Gets or sets a value indicating whether blackout is only in HCZ.
            </summary>
        </member>
        <member name="T:Mistaken.API.Utilities.Map.Overheat">
            <summary>
            Overheat.
            </summary>
        </member>
        <member name="P:Mistaken.API.Utilities.Map.Overheat.LockBlackout">
            <summary>
            Gets a value indicating whether blackout should be locked for SCP-079.
            </summary>
        </member>
        <member name="P:Mistaken.API.Utilities.Map.Overheat.OverheatLevel">
            <summary>
            Gets or sets current OverheatLevel.
            </summary>
        </member>
        <member name="T:Mistaken.API.Utilities.OverheatLevel">
            <summary>
            Overheat Level.
            </summary>
        </member>
        <member name="T:Mistaken.API.Utilities.TeslaMode">
            <summary>
            Tesla Mode.
            </summary>
        </member>
        <member name="T:Mistaken.API.VanishHandler">
            <inheritdoc/>
        </member>
        <member name="P:Mistaken.API.VanishHandler.Vanished">
            <summary>
            Gets list of players with active ghostmode and their levels.
            </summary>
        </member>
        <member name="M:Mistaken.API.VanishHandler.SetGhost(Exiled.API.Features.Player,System.Boolean,System.Byte,System.Boolean)">
            <summary>
            Sets GhostMode status for <paramref name="player"/>.
                <list type="table">
                    <item>Level 1 -> All admins</item>
                    <item>Level 2 -> <see cref="F:RoleType.Tutorial"/> and <see cref="F:RoleType.Spectator"/> admins only</item>
                    <item>Level 3 -> Greather or equal <see cref="F:UserGroup.KickPower"/> admins only</item>
                </list>
            </summary>
            <param name="player">Target player.</param>
            <param name="value">New state.</param>
            <param name="level">New level (Only used when <paramref name="value"/> is <see langword="true"/>).</param>
            <param name="silent">If <see langword="true"/> then <see cref="T:Mistaken.API.AnnonymousEvents"/> will not be fired.</param>
        </member>
        <member name="P:Mistaken.API.VanishHandler.Name">
            <inheritdoc/>
        </member>
        <member name="M:Mistaken.API.VanishHandler.OnEnable">
            <inheritdoc/>
        </member>
        <member name="M:Mistaken.API.VanishHandler.OnDisable">
            <inheritdoc/>
        </member>
    </members>
</doc>
